name: CI
on:
  push:
    paths-ignore:
      - 'CHANGELOG.md'
  pull_request:
  schedule:
    - cron: '0 11 * * 4'

jobs:
  skip_duplicate:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}

  pre-commit:
    needs: skip_duplicate
    if: ${{ needs.skip_duplicate.outputs.should_skip == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - uses: pre-commit/action@v2.0.0

  analyse:
    name: Analyse
    needs: skip_duplicate
    if: ${{ needs.skip_duplicate.outputs.should_skip == 'false' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          # We must fetch at least the immediate parents so that if this is
          # a pull request then we can checkout the head.
          fetch-depth: 2

      # If this run was triggered by a pull request event, then checkout
      # the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }}

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        # Override language selection
        with:
          languages: python, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  test-pip:
    needs: skip_duplicate
    if: ${{ needs.skip_duplicate.outputs.should_skip == 'false' }}
    strategy:
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          # install black, isort, and autopep8 for testing the pipe mode
          pip install black
          pip install isort>=5.3.0
          pip install autopep8
          # install sphinx_gallery and matplotlib if available (may not work on pypy)
          pip install sphinx_gallery~=0.7.0 || true
          pip install jupyter-fs || true
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # all Python files should follow PEP8 (except some notebooks, see setup.cfg)
          flake8 jupytext tests
          # exit-zero treats all errors as warnings.  The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --statistics
      - name: Install from source (required for the pre-commit tests)
        run: pip install .
      - name: Install a Jupyter Kernel
        run: python -m ipykernel install --name python_kernel --user
      - name: Test with pytest
        run: pytest --cov=./ --cov-report=xml
      - name: Upload coverage
        uses: codecov/codecov-action@v1

  test-conda:
    needs: skip_duplicate
    if: ${{ needs.skip_duplicate.outputs.should_skip == 'false' }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
        python-version: [ 3.7 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache conda
        uses: actions/cache@v1
        with:
          path: ~/conda_pkgs_dir
          key: conda-${{ matrix.os }}-python-${{ matrix.python-version }}-${{ hashFiles('environment-ci.yml') }}
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          auto-activate-base: false
          activate-environment: jupytext-ci
          python-version: ${{ matrix.python-version }}
          channels: defaults,conda-forge
          environment-file: environment-ci.yml
          use-only-tar-bz2: true
      - name: Lint with flake8
        shell: pwsh
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # all Python files should follow PEP8 (except some notebooks, see setup.cfg)
          flake8 jupytext tests
          # exit-zero treats all errors as warnings.  The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --statistics
      - name: Install from source
        # This is required for the pre-commit tests
        shell: pwsh
        run: pip install .
      - name: Create kernel
        shell: pwsh
        run: |
          python -m ipykernel install --name jupytext-ci --user
      - name: Install optional dependencies
        shell: pwsh
        run: |
          $ErrorActionPreference='silentlycontinue'
          # install black, isort, and autopep8 for testing the pipe mode
          conda install black --freeze-installed
          conda install isort>=5.3.0 --freeze-installed
          conda install autopep8 --freeze-installed
          # install sphinx_gallery and matplotlib if available
          conda install 'sphinx-gallery>=0.7' 'sphinx-gallery<0.8' --freeze-installed
          # myst-parser
          conda install 'markdown-it-py>=0.5' 'markdown-it-py<0.6' --freeze-installed
          exit 0
      - name: Conda list
        shell: pwsh
        run: conda list
      - name: Test with pytest
        shell: pwsh
        run: |
          if("${{ matrix.os }}" -eq "windows-latest"){
             pytest
          } else {
             pytest --cov=./ --cov-report=xml
          }
      - name: Upload coverage
        uses: codecov/codecov-action@v1
        if: ${{ matrix.os != 'windows-latest' }}

  test-pip-no-myst:
      needs: skip_duplicate
      if: ${{ needs.skip_duplicate.outputs.should_skip == 'false' }}
      strategy:
        matrix:
          python-version: [ 3.7 ]
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v2
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install dependencies, except markdown-it-py
          run: |
            python -m pip install --upgrade pip
            # All dependencies but markdown-it-py
            pip install 'nbformat<=5.0.8' pyyaml toml
            pip install -r requirements-dev.txt
        - name: Install a Jupyter Kernel
          run: python -m ipykernel install --name python_kernel --user
        - name: Test with pytest
          run: pytest --cov=./ --cov-report=xml
        - name: Upload coverage
          uses: codecov/codecov-action@v1

  publish:
    name: Publish to PyPi
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Build package
        run: |
          pip install wheel jupyter-packaging jupyterlab>=3
          BUILD_JUPYTERLAB_EXTENSION=1 python setup.py sdist bdist_wheel
      - name: Publish
        uses: pypa/gh-action-pypi-publish@v1.1.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_KEY }}
