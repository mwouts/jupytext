name: CI
on:
  push:
    paths-ignore:
      - 'CHANGELOG.md'
  pull_request:
  schedule:
    - cron: '0 11 * * 4'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # all Python files should follow PEP8 (except some notebooks, see setup.cfg)
          flake8 jupytext tests
          # exit-zero treats all errors as warnings.  The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --statistics

  test-pip:
    needs: lint
    strategy:
      matrix:
        python-version: [ 3.7, 3.8, 3.9, "3.10", "3.11"]
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements-dev.txt
          # install sphinx_gallery and matplotlib if available (may not work on pypy)
          python -m pip install sphinx_gallery~=0.7.0 || true
          python -m pip install jupyter-fs || true
      - name: Install from source (required for the pre-commit tests)
        run: python -m pip install .
      - name: Install a Jupyter Kernel
        run: python -m ipykernel install --name python_kernel --user
      - name: Install Quarto
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          # download the latest release
          gh release download --repo quarto-dev/quarto-cli --pattern 'quarto-*-linux-amd64.deb'
          # install it
          sudo apt install ./*.deb
      - name: Test with pytest
        run: pytest --cov=./ --cov-report=xml
      - name: Upload coverage
        uses: codecov/codecov-action@v1

  test-conda:
    needs: lint
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
        python-version: [ 3.9 ]
    runs-on: ${{ matrix.os }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache conda
        uses: actions/cache@v3
        with:
          path: ~/conda_pkgs_dir
          key: conda-${{ matrix.os }}-python-${{ matrix.python-version }}-${{ hashFiles('environment-ci.yml') }}
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          auto-activate-base: false
          activate-environment: jupytext-ci
          python-version: ${{ matrix.python-version }}
          channels: defaults,conda-forge
          environment-file: environment-ci.yml
          use-only-tar-bz2: true
      - name: Install from source
        # This is required for the pre-commit tests
        shell: pwsh
        run: python -m pip install .
      - name: Create kernel
        shell: pwsh
        run: |
          python -m ipykernel install --name jupytext-ci --user
      - name: Conda list
        shell: pwsh
        run: conda list
      - name: Test with pytest
        shell: pwsh
        run: |
          if("${{ matrix.os }}" -eq "windows-latest"){
             pytest
          } else {
             pytest --cov=./ --cov-report=xml
          }
      - name: Upload coverage
        uses: codecov/codecov-action@v1
        if: ${{ matrix.os != 'windows-latest' }}

  test-pip-no-myst:
      strategy:
        matrix:
          python-version: [ 3.9 ]
      runs-on: ubuntu-latest
      concurrency:
        group: ${{ github.workflow }}-${{ github.ref }}
        cancel-in-progress: true
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install dependencies, except markdown-it-py
          run: |
            python -m pip install --upgrade pip
            # All dependencies but markdown-it-py
            python -m pip install nbformat pyyaml toml
            python -m pip install -r requirements-dev.txt
        - name: Install a Jupyter Kernel
          run: python -m ipykernel install --name python_kernel --user
        - name: Test with pytest
          run: pytest --cov=./ --cov-report=xml
        - name: Upload coverage
          uses: codecov/codecov-action@v1

  test-pip-no-kernel:
    strategy:
      matrix:
        python-version: [ 3.9 ]
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install -r requirements-dev.txt
      - name: Test with pytest
        run: pytest --cov=./ --cov-report=xml
      - name: Upload coverage
        uses: codecov/codecov-action@v1

  test-pip-notebook-pre:
    strategy:
      matrix:
        python-version: [ 3.9 ]
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # All dependencies but markdown-it-py
          python -m pip install -r requirements.txt
          python -m pip install -r requirements-dev.txt
          # Notebook pre-release version #933
          python -m pip install --pre -U notebook
      - name: Install a Jupyter Kernel
        run: python -m ipykernel install --name python_kernel --user
      - name: Test with pytest
        run: pytest --cov=./ --cov-report=xml
      - name: Upload coverage
        uses: codecov/codecov-action@v1

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Build package
        run: |
          python -m pip install wheel jupyter-packaging 'jupyterlab>=3,<4'
          BUILD_JUPYTERLAB_EXTENSION=1 python setup.py sdist bdist_wheel
          # Don't publish a tar.gz file over 1MB  (Issue #730)
          if (($(wc -c < dist/*.tar.gz) > 1000000)); then exit 1; fi
          # node_modules should not be in the package
          if (($(tar -tf dist/*.tar.gz | grep node_modules | wc -l)>0)); then echo "node_modules should not be included" && exit 1; fi
          # Check that the lab and the notebook extensions are there
          if (($(tar -tf dist/*.tar.gz | grep packages/labextension/package.json$ | wc -l)==0)); then echo "Missing lab extension" && exit 1; fi
          if (($(tar -tf dist/*.tar.gz | grep jupytext/nbextension/index.js$ | wc -l)==0)); then echo "Missing notebook extension" && exit 1; fi
          # Install
          python -m pip install dist/*.tar.gz
          echo "Install went OK"
  publish:
    name: Publish to PyPi
    needs: build
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Build package
        run: |
          python -m pip install wheel jupyter-packaging 'jupyterlab>=3,<4'
          BUILD_JUPYTERLAB_EXTENSION=1 python setup.py sdist bdist_wheel
      - name: Publish
        uses: pypa/gh-action-pypi-publish@v1.1.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_KEY }}
